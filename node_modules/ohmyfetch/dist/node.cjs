'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const http = require('http');
const https = require('https');
const nodeFetch = require('node-fetch');
const fetch$1 = require('./chunks/fetch.cjs');
require('destr');
require('ufo');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e["default"] : e; }

const http__default = /*#__PURE__*/_interopDefaultLegacy(http);
const https__default = /*#__PURE__*/_interopDefaultLegacy(https);
const nodeFetch__default = /*#__PURE__*/_interopDefaultLegacy(nodeFetch);

function createNodeFetch() {
  const useKeepAlive = JSON.parse(process.env.FETCH_KEEP_ALIVE || "false");
  if (!useKeepAlive) {
    return nodeFetch__default;
  }
  const agentOpts = { keepAlive: true };
  const httpAgent = new http__default.Agent(agentOpts);
  const httpsAgent = new https__default.Agent(agentOpts);
  const nodeFetchOptions = {
    agent(parsedURL) {
      return parsedURL.protocol === "http:" ? httpAgent : httpsAgent;
    }
  };
  return function nodeFetchWithKeepAlive(input, init) {
    return nodeFetch__default(input, { ...nodeFetchOptions, ...init });
  };
}
const fetch = globalThis.fetch || createNodeFetch();
const $fetch = fetch$1.createFetch({ fetch });

exports.FetchError = fetch$1.FetchError;
exports.createFetch = fetch$1.createFetch;
exports.createFetchError = fetch$1.createFetchError;
exports.setHeader = fetch$1.setHeader;
exports.$fetch = $fetch;
exports.createNodeFetch = createNodeFetch;
exports.fetch = fetch;
